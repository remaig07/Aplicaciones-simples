Data Interface

public interface IBookServiceClass
    {
        Task<IEnumerable<Book>> GeatAllBook();
        Task<Book> GetBookDetails(int id);

        Task<bool> InsertBook(Book book);
        Task<bool> UpdateBook(Book book);
        Task<bool> DeleteBook(int id);
        Task<bool> SaveBook(Book book);

Data Clase que hereda Interface

using Microsoft.EntityFrameworkCore;
using Prac_BlazorCRUD.Models;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Threading.Tasks;

namespace Prac_BlazorCRUD.Data
{
    public class BookServiceClass : IBookServiceClass
    {
        private readonly MyBooksContext _context;

        public BookServiceClass(MyBooksContext context)
        {
            _context = context;
        }

        public async Task<bool> DeleteBook(int id)
        {
            var book = await _context.Books.FindAsync(id);
            _context.Books.Remove(book);

            return await _context.SaveChangesAsync() > 0;
        }

        public async Task<IEnumerable<Book>> GeatAllBook()
        {
            return await _context.Books.ToListAsync();
        }

        public async Task<Book> GetBookDetails(int id)
        {
            return await _context.Books.FindAsync(id);
        }

        public async Task<bool> InsertBook(Book book)
        {
            _context.Books.Add(book);

            return await _context.SaveChangesAsync() > 0;
        }

        public async Task<bool> SaveBook(Book book)
        {
            if (book.BookId > 0)
                return await UpdateBook(book);  
            else
                return await InsertBook(book);
        }

        public async Task<bool> UpdateBook(Book book)
        {
            _context.Entry(book).State = EntityState.Modified;

            return await _context.SaveChangesAsync() > 0;
        }
    }
}


Model CONTEXT

using Microsoft.EntityFrameworkCore;
using Microsoft.Extensions.Options;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Threading.Tasks;

namespace Prac_BlazorCRUD.Models
{
    public class MyBooksContext: DbContext
    {
        public DbSet<Book> Books { get; set; }

        protected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder)
        {
            optionsBuilder.UseSqlServer("Server=PC-Project; Database=BookDB; Integrated Security=true; Trusted_Connection=true;");
        }

    }
}


STARTUP

using Microsoft.AspNetCore.Builder;
using Microsoft.AspNetCore.Components;
using Microsoft.AspNetCore.Hosting;
using Microsoft.AspNetCore.HttpsPolicy;
using Microsoft.Extensions.Configuration;
using Microsoft.Extensions.DependencyInjection;
using Microsoft.Extensions.Hosting;
using Prac_BlazorCRUD.Data;
using Prac_BlazorCRUD.Models;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Threading.Tasks;

namespace Prac_BlazorCRUD
{
    public class Startup
    {
        public Startup(IConfiguration configuration)
        {
            Configuration = configuration;
        }

        public IConfiguration Configuration { get; }

        // This method gets called by the runtime. Use this method to add services to the container.
        // For more information on how to configure your application, visit https://go.microsoft.com/fwlink/?LinkID=398940
        public void ConfigureServices(IServiceCollection services)
        {
            services.AddRazorPages();
            services.AddServerSideBlazor();
            services.AddDbContext<MyBooksContext>();
            services.AddScoped<IBookServiceClass, BookServiceClass>();
        }

        // This method gets called by the runtime. Use this method to configure the HTTP request pipeline.
        public void Configure(IApplicationBuilder app, IWebHostEnvironment env)
        {
            if (env.IsDevelopment())
            {
                app.UseDeveloperExceptionPage();
            }
            else
            {
                app.UseExceptionHandler("/Error");
                // The default HSTS value is 30 days. You may want to change this for production scenarios, see https://aka.ms/aspnetcore-hsts.
                app.UseHsts();
            }

            app.UseHttpsRedirection();
            app.UseStaticFiles();

            app.UseRouting();

            app.UseEndpoints(endpoints =>
            {
                endpoints.MapBlazorHub();
                endpoints.MapFallbackToPage("/_Host");
            });
        }
    }
}

8jwc9suypbui67b

Vista



Index

@page "/"
@inject IBookServiceClass BookServiceClass

<h1>Book List</h1>

<p>This page shows a list of all books</p>

<div>
    <a href="/bookDetails"><i>Add New Book</i></a>
</div>

@if (books == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <table class="table">
        <thead>
            <tr>
                <th>Title</th>
                <th>Author</th>
                <th>Updated</th>
                <th>Delete</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var book in books)
            {
            <tr>
                <td>@book.Title</td>
                <td>@book.Author</td>
                <td><a href="/bookdetails/@book.BookId"><i>Edit</i></a></td>
                <td><a href="/bookdelete/@book.BookId"><i>Delete</i></a></td>
            </tr>
            }
        </tbody>
    </table>
}


@code {
    public IEnumerable<Book> books { get; set; }
    public string Message { get; set; }

    protected override async Task OnInitializedAsync()
    {
        try
        {
            books = await BookServiceClass.GeatAllBook();
        }
        catch (Exception e)
        {

            Message = e.Message;
        }
    }

}


Editar, Nuevo

@page "/bookDetails"
@page "/bookDetails/{id:int}"
@inject IBookServiceClass BookServiceClass
@inject NavigationManager NavigationManager

<h3>Book Details</h3>

<EditForm Model="@book">
    <table class="table">
        <tr>
            <td>Title:</td>
            <td>
                <input class="form-control col-sm-4" type="text" @bind="book.Title" />
            </td>
        </tr>

        <tr>
            <td>Author:</td>
            <td>
                <input class="form-control col-sm-4" type="text" @bind="book.Author" />
            </td>
        </tr>

        <tr>

            <td>
                <input type="submit" value="Save" @onclick="SaveBook" />
                <input type="button" value="Cancel" @onclick="Cancel" />
            </td>
        </tr>

    </table>

</EditForm>

@code {
    private Book book = new Book();

    protected async Task SaveBook()
    {
        await BookServiceClass.SaveBook(book);
        NavigationManager.NavigateTo("/");
    }

    protected void Cancel()
    {
        NavigationManager.NavigateTo("/");
    }

    [Parameter]
    public int id { get; set; }

    protected override async Task OnInitializedAsync()
    {
        if (id != 0)
        {
            book = await BookServiceClass.GetBookDetails(id);
        }
    }

}

DELETE

@page "/bookDelete/{id:int}"
@inject IBookServiceClass BookServiceClass
@inject NavigationManager NavigationManager

<h3>Book Delete</h3>
<p style="color:red;text-align:center">
    Are you sure you want to delete this book?
</p>

<EditForm Model="@book">
    <table class="table">
        <tr>
            <td>Title:</td>
            <td>
                <input class="form-control col-sm-4" type="text" @bind="book.Title" />
            </td>
        </tr>

        <tr>
            <td>Author:</td>
            <td>
                <input class="form-control col-sm-4" type="text" @bind="book.Author" />
            </td>
        </tr>

        <tr>

            <td>
                <input type="submit" value="Eliminar" @onclick="DeleteBook" />
                <input type="button" value="Cancel" @onclick="Cancel" />
            </td>
        </tr>

    </table>

</EditForm>

    @code {

        [Parameter]
        public int id { get; set; }

        private Book book = new Book();

        protected override async Task OnInitializedAsync()
        {
            book = await BookServiceClass.GetBookDetails(id);
        }

        protected async Task DeleteBook()
        {
            await BookServiceClass.DeleteBook(id);
            NavigationManager.NavigateTo("/");
        }

        protected void Cancel()
        {
            NavigationManager.NavigateTo("/");
        }

    }